//Diameter using height.
void dfs(vector<vector<ll>> &adj,vector<ll> &h,ll cur,ll par,vector<ll> &dia){
    if(adj[cur].size()==1 && par!=-1){
        h[cur] = 0;
        dia[cur] = 0;
    }
    ll maxm1 = -1,maxm = -1;
    for(auto i :adj[cur]){
        if(i != par){
            dfs(adj,h,i,cur,dia);
            if(h[i]>=maxm){
                maxm1 = maxm;
                maxm = h[i];
            }else if(h[i] > maxm1){
                maxm1 = h[i];
            }
        }
    }
    h[cur] = 1+maxm;
    if(maxm1 == -1){
        dia[cur] = h[cur];
    }
    dia[cur] = maxm+maxm1+2;
}
// Optimal approach
void dfs(vector<vector<ll>> &adj,ll cur,ll par,ll dis,ll &mdis,ll &fnode){
    if(dis > mdis){
        mdis = dis;
        fnode = cur;
    }
    for(auto i : adj[cur]){
        if(i != par){
            dfs(adj,i,cur,dis+1,mdis,fnode);
        }
    }
}
ll dia(vector<vector<ll>> &adj){
    ll fnode1 = 0,fnode2 = 0,mdis = 0;
    dfs(adj,1,-1,0,mdis,fnode1);
    mdis = 0;
    dfs(adj,fnode1,-1,0,mdis,fnode2);
    return mdis;
}
// Binary lifting kth ancestor
void dfs(vector<vector<ll>> &adj,vector<vector<ll>> &parents,ll cur,ll par){
    parents[cur][0] = par;
    for(auto child : adj[cur]){
        if(child!=par)
        dfs(adj,parents,child,cur);
    }
}
int main(){
    ios::sync_with_stdio(0);
    cin.tie(0);
    ll n,q;cin >> n >> q;
    vector<vector<ll>> adj(n+1);
    for(int i = 2;i <= n;i++){
        ll x;cin >> x;
        adj[x].pb(i);
    }
    int maxm = log2(n)+1;
    vector<vector<ll>> parents(n+1,vector<ll>(maxm+1));
    dfs(adj,parents,1,-1);
    for(int i = 1;i <= maxm;i++){
        for(int j = 1;j <= n;j++){
            if(parents[j][i-1]==-1){
                parents[j][i] = -1;
            }else{
                parents[j][i] = parents[parents[j][i-1]][i-1];
            }
        }
    }
    while(q--){
        ll node,k;cin >> node >> k;
        ll ans = node;
        for(int i = 0;i <= maxm;i++){
            if((k>>i)&1){
                if(ans == -1){
                    break;
                }
                ans = parents[ans][i];
            }
        }
        cout << ans << nline;
    }
}
// LCA
#include <bits/stdc++.h>
using namespace std;
#define ll long long
#define nline "\n"
#define ff first
#define ss second
#define pb push_back
int MOD = 1e9+7;
void dfs_it_ot(vector<vector<ll>>&adj,vector<ll> &intime,vector<ll> &outtime,ll &gtime,ll cur,ll par){
    gtime++;
    intime[cur] = gtime;
    for(auto i : adj[cur]){
        if(i != par){
            dfs_it_ot(adj,intime,outtime,gtime,i,cur);
        }
    }
    gtime++;
    outtime[cur] = gtime;
}
void dfs(vector<vector<ll>> &adj,vector<vector<ll>> &parents,ll cur,ll par){
    parents[cur][0] = par;
    for(auto child : adj[cur]){
        if(child!=par)
        dfs(adj,parents,child,cur);
    }
}
bool isancestor(ll x,ll y,vector<ll> &intime,vector<ll> &outtime){
     return (intime[x] <= intime[y]) && (outtime[x] >= outtime[y]);
}
ll lca(vector<vector<ll>> &parents,ll x,ll y,vector<ll> &intime,vector<ll> &outtime){
    if(x == y){
        return x;
    }
    if(isancestor(x,y,intime,outtime)){
        return x;
    }
    if(isancestor(y,x,intime,outtime)){
        return y;
    }
    int maxm = parents[0].size();
    for(int i = maxm-1;i >= 0;i--){
        ll parentofx = parents[x][i];
        if(parentofx!=-1 && !isancestor(parentofx,y,intime,outtime)){
            x = parentofx;
        }
    }
    return parents[x][0];
}
int main(){
    ios::sync_with_stdio(0);
    cin.tie(0);
    ll n,q;cin >> n >> q;
    vector<vector<ll>> adj(n+1);
    for(int i = 2;i <= n;i++){
        ll x;cin >> x;
        adj[x].pb(i);
    }
    int maxm = log2(n)+1;
    vector<vector<ll>> parents(n+1,vector<ll>(maxm+1));
    dfs(adj,parents,1,-1);
    for(int i = 1;i <= maxm;i++){
        for(int j = 1;j <= n;j++){
            if(parents[j][i-1]==-1){
                parents[j][i] = -1;
            }else{
                parents[j][i] = parents[parents[j][i-1]][i-1];
            }
        }
    }
    vector<ll> intime(n+1),outtime(n+1);
    ll gtime = 0;
    dfs_it_ot(adj,intime,outtime,gtime,1,-1);
    while(q--){
        ll a,b;cin >> a >> b;
        cout << lca(parents,a,b,intime,outtime) << nline;
    }
}

// SEG TREE WITH LAZY FOR SUM OF RANGE AND ASSIGNING VALUE TO RANGE
vector<ll> p(1e5);
vector<ll> seg(4e5);
vector<ll> lazy(4e5);
void build(ll ind,ll l,ll r){
    if(l == r){
        seg[ind] = p[l];
        return;
    }
    ll m = (l+r)/2;
    build(2*ind+1,l,m);
    build(2*ind+2,m+1,r);
    seg[ind] = seg[2*ind+1]+seg[2*ind+2];
    return;
}
void update(ll ind,ll l,ll r,ll low,ll high,ll val){
    if(lazy[ind]!=0){
        seg[ind] = (r-l+1)*lazy[ind];
        if(l!=r){
            lazy[2*ind+1] = lazy[ind];
            lazy[2*ind+2] = lazy[ind];
        }
        lazy[ind] = 0;
    }
    if(l>= low && r<= high){
        seg[ind] = (r-l+1)*val;
        if(l!=r){
            lazy[2*ind+1] = val;
            lazy[2*ind+2] = val;
        }
        return;
    }
    if(r<low||l>high||l>r){
        return ;
    }
    ll m = (l+r)/2;
    update(2*ind+1,l,m,low,high,val);
    update(2*ind+2,m+1,r,low,high,val);
    seg[ind] = seg[2*ind+1]+seg[2*ind+2];
    return;
}
ll query(ll ind,ll l,ll r,ll low,ll high){
    if(lazy[ind]!=0){
        seg[ind] = (r-l+1)*lazy[ind];
        if(l!=r){
            lazy[2*ind+1] = lazy[ind];
            lazy[2*ind+2] = lazy[ind];
        }
        lazy[ind] = 0;
    }
    if(l>= low && r<= high){
        return seg[ind];
    }
    if(r<low||l>high||l>r){
        return 0;
    }
    ll m = (l+r)/2;
    return query(2*ind+1,l,m,low,high)+query(2*ind+2,m+1,r,low,high);
}

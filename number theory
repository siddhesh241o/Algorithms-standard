//sieve of eratosthenes
vector<bool> p(n,true);
void sieve(){
    p[0]= false;p[1]= false;
    for(int i = 2;i*i <= n;i++){
        if(p[i]==true){
            for(int j = i*i;j<= n;j+=i){
                p[j]=false;
            }
        }
    }
}
//gcd
int gcd(int a,int b){
    if(b==0){
        return a;
    }
    gcd(b,a%b);
}
// smallest prime factor
void factorisation(int n,vector<ll> &spf){
    for(int i = 2;i <= n;i++){
        for(int j = i;j <= n;j+=i){
            if(spf[j]==-1){
                spf[j]=i;
            }
        }
    }
}
//combinatorics and factorials
int mod = 1e9+7;
int N = 1e5;
vector<ll> fact(N+1);
vector<ll> inv(N+1);
ll binpow(ll base,ll pow){
    ll ans = 1;
    base %= mod;
    while(pow > 0){
        if(pow%2) (ans *= base)%= mod;
        pow /= 2;
        (base *= base)%= mod;
    }
    return ans;
}
ll combi(ll n,ll r){
    if(n == r || r == 0) return 1;
    if(n - r < 0 || r < 0) return 0;
    return 1ll*fact[n]*inv[r]%mod*inv[n-r]%mod;
}
fact[0] = 1;
for(ll i = 1;i <= N;i++){
    fact[i] = (fact[i-1]*i)%mod;
}
inv[N] = binpow(fact[N],mod-2);
for(ll i = N-1;i >= 1;i--){
    inv[i] = 1ll*inv[i+1]*(i+1)%mod;
}
//same
#define int long long 
 
const int MOD = 1e9 + 7;
 
int mod(int a, int m = MOD) {
    return a % m;
}
 
template <class T> class Math {
  public:
    vector<T> fact, invfact;
    Math() {}
    Math(int n) {
        fact.resize(n);
        invfact.resize(n);
        fact[0] = invfact[0] = 1;
        for (int i = 1; i < n; i++) {
            fact[i] = mod(i * fact[i - 1]);
            invfact[i] = modinv(fact[i]);
        }
    }
    T modinv(T x, T m = MOD) { return expo(x, m - 2, m); }
    T expo(T base, T exp, T m = MOD) {
        T res = 1;
        while (exp) {
            if (exp & 1)
                res = mod(res * base, m);
            base = mod(base * base, m);
            exp >>= 1;
        }
        return res;
    }
    T choose(T n, T k) {
        if (k < 0 || k > n || n < 0) return 0;
        T ans = fact[n];
        ans = mod(ans * invfact[n - k]);
        ans = mod(ans * invfact[k]);
        return ans;
    }
};

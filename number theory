//sieve of eratosthenes
vector<bool> p(n,true);
void sieve(){
    p[0]= false;p[1]= false;
    for(int i = 2;i*i <= n;i++){
        if(p[i]==true){
            for(int j = i*i;j<= n;j+=i){
                p[j]=false;
            }
        }
    }
}
//gcd
int gcd(int a,int b){
    if(b==0){
        return a;
    }
    gcd(b,a%b);
}
// smallest prime factor
void factorisation(int n,vector<ll> &spf){
    for(int i = 2;i <= n;i++){
        for(int j = i;j <= n;j+=i){
            if(spf[j]==-1){
                spf[j]=i;
            }
        }
    }
}
//combinatorics and factorials
int mod = 1e9+7;
int N = 1e5;
vector<ll> fact(N+1);
ll binpow(ll base,ll pow){
    ll ans = 1;
    base %= mod;
    while(pow > 0){
        if(pow%2) (ans *= base)%= mod;
        pow /= 2;
        (base *= base)%= mod;
    }
    return ans;
}
ll combi(ll n,ll r){
    if(n - r < 0) return 0;
    return (fact[n]*binpow((fact[n-r]*fact[r])%mod,mod-2))%mod;
}
fact[0] = 1;
for(ll i = 1;i <= N;i++){
    fact[i] = (fact[i-1]*i)%mod;
}
